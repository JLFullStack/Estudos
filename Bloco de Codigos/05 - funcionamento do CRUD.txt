								PASSOS NECESSÁRIOS PARA O FUNCIONAMENTO DO CRUD


 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA CLASSE AppDbContext:

    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> Options) : base(Options) //Construtor para conexão com o banco
        {
        }

        #region TABELAS
        public DbSet<Aluno> Alunos { get; set; } //Tabela da Model Aluno
        #endregion
    }


 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA INTERFACE IREPOSITORY:

    public interface IAlunoRepository
    {
        IEnumerable<Aluno> Alunos { get; } //IEnumerable retorna a lista dos Alunos para serem utilizados nos foreach das views
        Aluno GetAlunoById(int id);        //Listar aluno Id e sua respectiva classe para retornar seus dados às views de atualização e exclusão
        Aluno Adicionar(Aluno aluno);      //Adicionar novo aluno no banco de dados
        Aluno Atualizar(Aluno aluno);      //Atualizar novo aluno no banco de dados
        bool Excluir(int id);              //Excluir aluno do banco de dados
    }
}


 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA CLASSE CONCRETA DO REPOSITORY:

    public class AlunoRepository : IAlunoRepository
    {
        #region Instância de AppDbContext
        private readonly AppDbContext _appContext;  /* injetar uma instância ("readonly" somente leitura) fora do construtor para 
                                                       receber a instância interna do construtor e liberar seu acesso fora do mesmo */

        public AlunoRepository(AppDbContext Context) //construtor
        {
            _appContext = Context;
        }
        #endregion

        #region CRUD

        #region LISTAR TODOS OS ALUNOS E SUAS RESPECTIVAS CLASSES
        public IEnumerable<Aluno> Alunos => _appContext.Alunos.Include(c => c.Classe); /*IEnumerable - retorna a lista dos alunos para serem utilizadas nos foreach das views
                                                                                         .Include(c => c.Classe) inclui o retorno da lista das classes dos alunos */
        #endregion

        #region LISTAR ALUNO POR ID E SUA RESPECTIVA CLASSE
        public Aluno GetAlunoById(int id)
        {
            return _appContext.Alunos.Include(c => c.Classe).FirstOrDefault(aluno => aluno.IdAluno == id); // buscar o primeiro ou o único registro da tabela Alunos 
                                                                                                           //.Include(c => c.Classe) inclui o retorno da classe do aluno específico
                                                                                                           //buscar registro onde aluno.IdAluno seja igual ao id passado por parâmetro
        }
        #endregion

        #region ADICIONAR NOVO ALUNO
        public Aluno Adicionar(Aluno aluno)
        {
            _appContext.Alunos.Add(aluno); /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                     para adicionar aluno no banco de dados       */

            _appContext.SaveChanges();     // Código necessário para confirmar para o banco a ação de adicionar

            return aluno;
        }
        #endregion

        #region ATUALIZAR NOVO ALUNO
        public Aluno Atualizar(Aluno aluno)
        {
                Aluno alunoDB = GetAlunoById(aluno.IdAluno); // alunoDB recebe por Id os dados do aluno passados por parâmetro pelo layout "Adicionar"

                if (alunoDB == null) throw new System.Exception("Aluno não cadastrado no sistema"); /* condição verifica se alunoDB está cadastrado no banco de dados,
                                                                                                       se o resultado da verificação for nula, isto indica que não 
                                                                                                       existe nenhum aluno cadastrado com este id */

            /*se o resultado da verificação retornar um valor existente, 
              o "alunoDB" cadastrado no banco de dados receberá os dados 
              novos passados pelo usuário */
            alunoDB.NomeAluno  = aluno.NomeAluno;
            alunoDB.NascAluno  = aluno.NascAluno;
            alunoDB.TelAluno   = aluno.TelAluno;
            alunoDB.EmailAluno = aluno.EmailAluno;

            _appContext.Alunos.Update(alunoDB); /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                para editar aluno já existente no banco de dado       */

            _appContext.SaveChanges();      // Código necessário para confirmar para o banco a ação de atualizar

            return aluno;

        }
        #endregion

        #region EXCLUIR ALUNO
        public bool Excluir(int id)
        {
            Aluno alunoDB = GetAlunoById(id); // alunoDB recebe por Id os dados do aluno passados por parâmetro pelo layout "Adicionar"

            if (alunoDB == null) throw new System.Exception("Aluno não cadastrado no sistema"); /* condição verifica se alunoDB está cadastrado no banco de dados,
                                                                                                   se o resultado da verificação for nula, isto indica que não 
                                                                                                   existe nenhum aluno cadastrado com este id */


            _appContext.Alunos.Remove(alunoDB);  /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                    para excluir aluno já existente no banco de dado       */

            _appContext.SaveChanges();          // Código necessário para confirmar para o banco a ação de excluir

            return true;
        }
        #endregion

        #endregion
    }
}

 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA CONTROLLER:

    public class AlunoController : Controller
    {
        #region Instância do Repositório Aluno 
        private readonly IAlunoRepository _alunoRepository;

        public AlunoController(IAlunoRepository alunoRepository)
        {
            _alunoRepository = alunoRepository;
        }
        #endregion

        #region MÉTODOS GET
        public IActionResult Index()
        {
            IEnumerable<Aluno> alunos = _alunoRepository.Alunos; /*IEnumerable<Aluno> alunos = _alunoRepository.Alunos; //Lista todos os alunos cadastrados
                                                                 //no banco de dados, inclusive sua respectiva classe */
            return View(alunos);
        }

        public IActionResult Adicionar()
        {
            return View();
        }

        public IActionResult Atualizar(int id)
        {
            Aluno aluno = _alunoRepository.GetAlunoById(id); //buscando por id o Aluno já cadastrado para retornar seus dados na view de Atualização
            return View(aluno);
        }

        public IActionResult ConfirmarExcluir(int id)       //este método servirá para confirmar se o usuário realmente quer excluir um aluno antes que o faça
        {
            Aluno aluno = _alunoRepository.GetAlunoById(id); //buscando por id o Aluno já cadastrado para retornar seus dados na view de Exclusão
            return View(aluno);
        }

        public IActionResult Excluir(int id)                //este método servirá para realizar a ação de excluir um aluno depois da confirmação
        {
            try //tatando erros e excessões
            {
                bool excluido = _alunoRepository.Excluir(id); //adicionar a instância em uma variável booleana para verificar se realmente foi excluído

                if (excluido)
                {
                    TempData["MensagemSucesso"] = "Aluno excluído com sucesso.";
                }
                else
                {
                    TempData["MensagemErro"] = "algum erro inesperado ocorreu ao tentar excluir o aluno.";
                }
                return RedirectToAction("Index");
            }
            catch (System.Exception erro) //tratamento de Excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu ao tentar excluir o aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }

        }
        #endregion

        #region MÉTODOS POST

        #region Adicionar Aluno
        [HttpPost]
        public IActionResult Adicionar(Aluno aluno) //Método Post Adicionar
        {
            //Lista todas as classes para a DropDown List
            ViewBag.Classes = _classeRepository.Classes.ToList();

            try //tatando erros e excessões
            {
                if (ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dará continuação ao cadastro 
                {
                    _alunoRepository.Adicionar(aluno);
                    TempData["MensagemSucesso"] = "Aluno cadastrado com sucesso.";
                    return RedirectToAction("Index");
                }
                return View(aluno); /*senão, ao clicar em adicionar, o usuário é redirecionado novamente para a 
			                      View Adicionar, onde serão mostradas as mensagens de erros.           */

            }
            catch (System.Exception erro) //tratando erros e excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu no cadastro do aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }
        }
        #endregion


        #region Atualizar Aluno
        [HttpPost]
        public IActionResult Atualizar(Aluno aluno) //Método Post Atualizar
        {
            try //tatando erros e excessões
            {
                if (ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dá continuação ao cadastro 
                {
                    _alunoRepository.Atualizar(aluno);
                    TempData["MensagemSucesso"] = "dados do aluno atualizados com sucesso.";
                    return RedirectToAction("Index");
                }
                return View(aluno); /*senão, ao clicar em adicionar, o usuário é redirecionado novamente para a 
			                      View Adicionar, onde serão mostradas as mensagens de erros.           */
            }
            catch (System.Exception erro) //tatando erros e excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu na atualização do aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }
        }
        #endregion

        #endregion
    }
}

 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA CLASSE STARTUP: Injeção de dependência

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<AppDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("ConnectionString"))); //GetConnectionString

            services.AddScoped<IAlunoRepository, AlunoRepository>(); //Injeção de dependência

            services.AddControllersWithViews();
        }

 <<<-------------------------------------------------------------------------------------------------------------------------------------------->>>

NA VIEW "INDEX" DA MODEL ALUNO:

@model IEnumerable<Aluno> <!--Vincular a lista "IEnumerable<Aluno>" com a View "Index" de Aluno para fazer o Laço de repetição e listar todos os alunos 
			      na view, inclusive suas respectivas classes-->(retirar comentário, pois dará erro)
@{
    ViewData["Title"] = "Cadastro de Alunos";
}

<!--cabeçalho-->
<div class="text-center">
    <h1 class="display-4">Lista de Alunos</h1>
</div>
<!--cabeçalho-->

<br />

<!--Alerta de sucesso-->
@if (TempData["MensagemSucesso"] != null)
{
    <div class="alert alert-success alert-dismissible">
        <!--Para fechar a mensagem de alerta, adicione uma classe alert-dismissible na div de alerta.-->

        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <!--Em seguida, adicione um link ou um elemento de botão para fechar
            (quando você clicar neste botão, a caixa de alerta desaparecerá)-->

        <strong>Sucesso!</strong> @TempData["MensagemSucesso"] <!--exibindo a menssagem da TempData de sucesso-->
    </div>
}
<!--Alerta de sucesso-->

<!--Alerta de erro-->
@if (TempData["MensagemErro"] != null) //trativa para retornar a mensagem do try / catch criada na controller
{
    <div class="alert alert-danger alert-dismissible">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <strong>Erro!</strong> @TempData["MensagemErro"] <!--exibindo a menssagem da TempData de sucesso-->
    </div>
}
<!--Alerta de erro-->

<!--botão adicionar Aluno-->
<div class="text-end">
    <a role="button" class="btn btn-info" asp-controller="Aluno" asp-action="Adicionar">Adicionar Aluno</a>
</div>
<!--botão adicionar Aluno-->

<br />

<!--tabela com a lista de alunos-->
<table class="table table-dark table-striped text-center" id="Table-Alunos">
    <!--id="Table-Alunos" criada para a paginação-->
    <!--colunas-->
    <thead>
        <tr>
            <th scope="col">MATRÍCULA</th>
            <th scope="col">CLASSE</th>
            <th scope="col">NOME</th>
            <th scope="col">DATA DE NASCIMENTO</th>
            <th scope="col">CONTATO</th>
            <th scope="col">E-MAIL</th>
            <!--<th scope="col">ENDEREÇO</th>-->
            <th scope="col"></th>
        </tr>
    </thead>
    <!--colunas-->

    <tbody>
        <!--linhas-->
        @if (Model != null && Model.Any()) //condição para o laço de repetição (se a model com a lista de alunos for diferente de nulo e se a model contém algum dado)
        {
            foreach (Aluno alunos in Model) //Laço de repetição para listar todos os alunos
            {
                <tr>
                    <th scope="row">@alunos.IdAluno</th> <!--alunos.Propriedade busca a propriedade da model para aparecer na tela para o usuário-->
                    <td>@Html.DisplayFor(Aluno => alunos.Classe.NomeClasse)</td> <!--Tag Helpers utilizada para listar as respectivas classes dos alunos-->
                    <td>@alunos.NomeAluno</td>
                    <td>@alunos.NascAluno.ToString("dd/MM/yyyy")</td>
                    <td>@alunos.TelAluno</td>
                    <td>@alunos.EmailAluno</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                            <a role="button" class="btn btn-danger" asp-route-id="@alunos.IdAluno" asp-controller="Aluno" asp-action="ConfirmarExcluir">excluir</a>
                            <!--asp-route-id="alunos.IdAluno" mapeia o Id cadastrado para realizar a ação passada para a tabela-->

                            <a role="button" class="btn btn-warning" asp-route-id="@alunos.IdAluno" asp-controller="Aluno" asp-action="Atualizar">Atualizar</a>
                        </div>
                    </td>
                </tr>
            }
        }
        <!--linhas-->
    </tbody>

</table>
<!--tabela com a lista de Alunos-->

<<<-------------------------------------------------------------------------->>>

NA VIEW "ADICIONAR" DA MODEL ALUNO:

@model Aluno
@{
    ViewData["Title"] = "Adicionar Aluno";
}

<!--cabeçalho-->
<div class="text-center">
    <h1 class="display-4">Adicionar Aluno</h1>
</div>
<!--cabeçalho-->

<!--formulário de adição-->
<form asp-controller="Aluno" asp-action="Adicionar" method="Post">
    <!--Ao clicar em adicionar o sistema será vinculado ao método post Adicionar criada na Controller Aluno -->

    <!--Nome-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.NomeAluno)
        <input class="form-control" type="text" asp-for="NomeAluno" name="NomeAluno" placeholder="Digite o nome do aluno">
        <!--asp-for="NomeAluno" mapeia a imput com a propriedade NomeAluno da model Aluno que está vinculada à view -->
    </div>
    <!--Nome-->

    <!--Data de Nascimento-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.NascAluno)
        <input class="form-control" type="text" asp-for="NascAluno" name="NascAluno" placeholder="Digite a data de nascimento do aluno">
    </div>
    <!--Data de Nascimento-->

    <!--Contato-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.TelAluno)
        <input class="form-control" type="text" asp-for="TelAluno" name="TelAluno" placeholder="digite o número de contato do aluno">
    </div>
    <!--Contato-->

    <!--E-mail-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.EmailAluno)
        <input class="form-control" type="text" asp-for="EmailAluno" name="EmailAluno" placeholder="digite o e-mail do aluno">
    </div>
    <!--E-mail-->

    <br />

    <!--botão Adicionar-->
    <button type="submit" class="btn btn-info btn-block align-self-end">Adicionar</button>
    <!--botão Adicionar-->

    <br />

    <!--botão Voltar-->
    <a class="btn btn-secondary btn-block align-self-start" asp-controller="Aluno" asp-action="Index" role="button">Voltar</a>
    <!--botão Voltar-->

</form>
<!--formulário de adição-->


<<<-------------------------------------------------------------------------->>>

NA VIEW "ATUALIZAR" DA MODEL ALUNO:

@model Aluno
@{
    ViewData["Title"] = "Atualizar";
}

<!--cabeçalho-->
<div class="text-center">
    <h4 class="display-4">Atualizar cadastro do Aluno (@Model.NomeAluno)</h4>
</div>
<!--cabeçalho-->

<!--formulário de Edição-->
<form asp-controller="Aluno" asp-action="Atualizar" method="post"> <!--Ao clicar em atualizar o sistema será vinculado ao 
                                                                       método post Atualizar criada na Controller Aluno -->
   
    <!--Id-->
            <input type="hidden" asp-for="IdAluno"> <!-- tipe="hidden" asp-for="IdAluno" mapeia de forma invisível
                                                         para o usuário a imput com a propriedade IdAluno da model Aluno -->
    <!--Id-->

    <!--Nome-->
    @Html.DisplayNameFor(x => x.NomeAluno)
    <div class="form-group">
        <input class="form-control" type="text" asp-for="NomeAluno" name="NomeAluno">
        <!--asp-for="NomeAluno" mapeia a imput com a propriedade NomeAluno da model Aluno -->
    </div>
    <!--Nome-->

    <!--Data de Nascimento-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.NascAluno)
        <input class="form-control" type="text" asp-for="NascAluno" name="NascAluno">
    </div>
    <!--Data de Nascimento-->

    <!--Contato-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.TelAluno)
        <input class="form-control" type="text" asp-for="TelAluno" name="TelAluno">
    </div>
    <!--Contato-->

    <!--E-mail-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.EmailAluno)
        <input class="form-control" type="text" asp-for="EmailAluno" name="EmailAluno">
    </div>
    <!--E-mail-->

    <br />

    <!--botão Editar-->
    <button type="submit" class="btn btn-warning align-self-end btn-block">Atualizar</button>
    <!--botão Editar-->

    <br />

    <!--botão Voltar-->
    <a class="btn btn-secondary align-self-start btn-block" asp-controller="Aluno" asp-action="Index" role="button">Cancelar</a>
    <!--botão Voltar-->

</form>
<!--formulário de Edição-->



<<<-------------------------------------------------------------------------->>>

NA VIEW "CONFIRMAR EXCLUIR" DA MODEL ALUNO:

@model Aluno
@{
    ViewData["Title"] = "Excluir";
}

<!--cabeçalho-->
<div class="text-center">
    <h1 class="display-4">Excluir Aluno</h1>
</div>
<!--cabeçalho-->

<br />

<div class="text-center">
    <h3>Realmente deseja excluir o aluno (@Model.NomeAluno) ?</h3> <!--Model.NomeAluno mostra para o usuário o nome do aluno que ele escolheu para apagar-->
</div>

<a role="button" class="btn btn-danger btn-block" asp-controller="Aluno" asp-action="Excluir" asp-route-id="@Model.IdAluno">Excluir</a>
<a role="button" class="btn btn-secondary btn-block" asp-controller="Aluno" asp-action="Index">Cancelar</a>
















		