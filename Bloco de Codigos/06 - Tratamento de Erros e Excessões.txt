									TRATAMENTO DE ERROS E EXCEÇÕES: validações


Nas Models: 
as validações são feitas utilizando alguns atributos da Data Annotation.

exemplos:

[Required(ErrorMessage = "Defina o nome do produto")] /*.................................Required – significa campo obrigatório, ou seja, caso o internauta não digite, será mostrada 
								        		 a mensagem definida em ErrorMessage. Desta forma, quando o banco de dados for 
											 gerado, a propriedade Allow Null será falso */

[EmailAddress(ErrorMessage = "Defina um e-mail válido")] /*..............................EmailAddress - Verifica se o formato do endereço que o usuário 
							       				 digitou é um endereço de e-mail válido */

[Phone(ErrorMessage = "Defina um número de telefone válido")] /*.........................Phone - Verifica se o formato do número para contato que o 
								    			 usuário digitou é um número válido */

[MinLength(5, ErrorMessage = "O tamanho mínimo do nome são de 5 letras.")] /*............MinLength – informa qual é o tamanho mínimo do respectivo campo. Caso a regra 
											 seja violada, será exibida a mensagem no ErrorMessage. */


[MaxLength(10, ErrorMessage = "O tamanho máximo do nome são de 10 letras.")] /*...........MaxLength – informa qual é o tamanho máximo do respectivo campo. Caso a 
											  regra seja violada, será exibida a mensagem no ErrorMessage. */

[StringLength(100, MinimumLength = 1,] /*.................................................StringLength – 100 antes da vírgula define o tamanho máximo do campo, 
											  MinimumLength = 1 indica o tamanho mínimo. No banco de dados os números 
											  atribuídos serão de MaxLength e MinLength. */

[Range(1, 100, ErrorMessage = "Quantidade mínima de 1 unidade")] /*.......................Range – define a faixa de dados aceita pela propriedade. Caso esteja fora da 
											  faixa é mostrado o ErrorMessage.


Exemplos de Propriedades com Data Annotation de validação:

        //NTelefone
        [Column(Order = 3)]
        [Display(Name = "Telefone de Contato")]
	[Phone(ErrorMessage = "Defina um número de telefone válido")]
        [Required(ErrorMessage = "É necessário ao menos um número de contato para o Aluno")]
        public string TelAluno { get; set; }

        //e-mail
        [Column(Order = 4)]
        [Display(Name = "e-mail")]
	[EmailAddress(ErrorMessage = "Defina um e-mail válido")]
        [Required(ErrorMessage = "É necessário ao menos um e-mail de contato para o Aluno")]
        public string EmailAluno { get; set; }


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>


Nas Controllers: 
Verificar se os dados que o usuário digitou estão válidos com as requisições das data Annotations.

Exemplos:

        #region MÉTODOS POST

        #region Adicionar Aluno
        [HttpPost]
        public IActionResult Adicionar(Aluno aluno) //Método Post Adicionar
        {
	    if(ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dará continuação ao cadastro 
	    {
            	_alunoRepository.Adicionar(aluno);
            	return RedirectToAction("Index");
	    }
	    return View(aluno); /*senão, ao clicar em adicionar, o usuário é redirecionado novamente para a 
			         View Adicionar, onde serão mostradas as mensagens de erros.           */
        }
        #endregion


        #region Atualizar Aluno
        [HttpPost]
        public IActionResult Atualizar(Aluno aluno) //Método Post Atualizar
        {
	    if(ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dará continuação à atualização 
	    {
            	_alunoRepository.Atualizar(aluno);
            	return RedirectToAction("Index");
	    }
	    return View(aluno); /*senão, ao clicar em atualizar, o usuário é redirecionado novamente para a 
			         View Atualizar, onde serão mostradas as mensagens de erros.           */
        }
        #endregion 


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Nas Views:
Utilizar o atributo ValidationMessageFor para mostrar as menssagens de erro para o usuário

Exemplos:

    <!--Nome-->
    @Html.DisplayNameFor(x => x.NomeAluno)
    <div class="form-group">
        <input class="form-control" type="text" asp-for="NomeAluno" name="NomeAluno">
        <!--asp-for="NomeAluno" mapeia a imput com a propriedade NomeAluno da model Aluno -->

        @Html.ValidationMessageFor(x => x.NomeAluno) <!--atributo para mostrar as menssagens de erro de validação para o usuário-->
    </div>
    <!--Nome-->

    <!--Data de Nascimento-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.NascAluno)
        <input class="form-control" type="text" asp-for="NascAluno" name="NascAluno">

        @Html.ValidationMessageFor(x => x.NascAluno) <!--atributo para mostrar as menssagens de erro de validação para o usuário-->
    </div>
    <!--Data de Nascimento-->

    <!--Contato-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.TelAluno)
        <input class="form-control" type="text" asp-for="TelAluno" name="TelAluno">

        @Html.ValidationMessageFor(x => x.TelAluno) <!--atributo para mostrar as menssagens de erro de validação para o usuário-->
    </div>
    <!--Contato-->

    <!--E-mail-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.EmailAluno)
        <input class="form-control" type="text" asp-for="EmailAluno" name="EmailAluno">

        @Html.ValidationMessageFor(x => x.EmailAluno) <!--atributo para mostrar as menssagens de erro de validação para o usuário-->
    </div>
    <!--E-mail-->

    <br />


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>


Na parte de CSS das views: 
Melhorar a exibição das mensagens de erro

1 - com o projeto em funcionamento, abrir a console de desenvolvimendo do navegador clicando na tecla F12 
2 - ativar a seleção de um elemento da página para inspecionar clicando no conjunto de teclas Ctrl + Shift + C
3 - selecionar a mensagem de erro, procurar a span criada e copiar o nome da classe criada nesta span

exemplo: <span class"field-validation-error"....>

4 - na pasta .CSS, encontrada em wwwroot, colar o nome da classe span e personalizar a menssagem de validação de acordo com o desejado

exemplo de personalização CSS para menssagens de erro:

.field-validation-error {
     color: #e01d1d;
}


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Mensagem de sucesso ou de erro ao fazer algum processo do CRUD:

<<<-------------------------------------------------------------

Nas Controllers: 
Utilizar o try / catch para o tratamento de erro

Exemplos:

        public IActionResult Excluir(int id)                //este método servirá para realizar a ação de excluir um aluno depois da confirmação
        {
            try //tatando erros e excessões
            {
                bool excluido = _alunoRepository.Excluir(id); //adicionar a instância em uma variável booleana para verificar se realmente foi excluído

                if (excluido)
                {
                    TempData["MensagemSucesso"] = "Aluno excluído com sucesso.";
                }
                else
                {
                    TempData["MensagemErro"] = "algum erro inesperado ocorreu ao tentar excluir o aluno.";
                }
                return RedirectToAction("Index");
            }
            catch (System.Exception erro) //tratamento de Excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu ao tentar excluir o aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }

        }
        #endregion

        #region MÉTODOS POST

        #region Adicionar Aluno
        [HttpPost]
        public IActionResult Adicionar(Aluno aluno) //Método Post Adicionar
        {
            try //tatando erros e excessões
            {
                if (ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dará continuação ao cadastro 
                {
                    _alunoRepository.Adicionar(aluno);
                    TempData["MensagemSucesso"] = "Aluno cadastrado com sucesso.";
                    return RedirectToAction("Index");
                }
                return View(aluno); /*senão, ao clicar em adicionar, o usuário é redirecionado novamente para a 
			                      View Adicionar, onde serão mostradas as mensagens de erros.           */

            }
            catch (System.Exception erro) //tatando erros e excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu no cadastro do aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }
        }
        #endregion


        #region Atualizar Aluno
        [HttpPost]
        public IActionResult Atualizar(Aluno aluno) //Método Post Atualizar
        {
            try //tatando erros e excessões
            {
                if (ModelState.IsValid) //se os dados que o usuário digitou estão de acordo com as validações da data Annotation, o sistema dá continuação ao cadastro 
                {
                    _alunoRepository.Atualizar(aluno);
                    TempData["MensagemSucesso"] = "dados do aluno atualizados com sucesso.";
                    return RedirectToAction("Index");
                }
                return View(aluno); /*senão, ao clicar em adicionar, o usuário é redirecionado novamente para a 
			                      View Adicionar, onde serão mostradas as mensagens de erros.           */
            }
            catch (System.Exception erro) //tatando erros e excessões
            {
                TempData["MensagemErro"] = $"algum erro inesperado ocorreu na atualização do aluno. Detalhes do erro: {erro.Message}";
                return RedirectToAction("Index");
            }
        }
        #endregion

        #endregion



<<<-------------------------------------------------------------

Na página Index referente a model: 

pesquisar na internet algum código de mensagem BootStrap de alerta "BootStrap alert" e colar na página Index referente a model

exemplo de menssagem de sucesso e de erro:

<!--Alerta de sucesso-->
@if(TempData["MensagemSucesso"] != null)
{
    <div class="alert alert-success alert-dismissible"> <!--Para fechar a mensagem de alerta, adicione uma classe alert-dismissible na div de alerta.-->

        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a><!--Em seguida, adicione um link ou um elemento de botão para fechar
                                                                                         (quando você clicar neste botão, a caixa de alerta desaparecerá)-->

        <strong>Sucesso!</strong> @TempData["MensagemSucesso"] <!--exibindo a menssagem da TempData de sucesso-->
    </div>
}
<!--Alerta de sucesso-->

<!--Alerta de erro-->
@if(TempData["MensagemErro"] != null) //trativa para retornar a mensagem do try / catch criada na controller
{
    <div class="alert alert-danger alert-dismissible">
        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
        <strong>Erro!</strong> @TempData["MensagemErro"] <!--exibindo a menssagem da TempData de erro-->
    </div>
}
<!--Alerta de erro-->

