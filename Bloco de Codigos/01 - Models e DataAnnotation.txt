							CÓDIGOS MAIS UTILIZADOS DO DATA ANNOTATION

<<<--------------------------------------------------------------------
DATA ANNOTATION para Front End: (Utilizados para visualização e impor regras de validação nas views)
 

	ErrorMessage: Parâmetro utilizado no tratamento de erros e exceções para definir a mensagem de erro que será mostrada para o usuário. 

        [Required(ErrorMessage = "Defina o nome do produto")] /*........Required – significa campo obrigatório, ou seja, caso o internauta não digite, será mostrada 
								        a mensagem definida em ErrorMessage. Desta forma, quando o banco de dados for gerado, a 
								        propriedade Allow Null será falso */

	[MinLength(5, ErrorMessage = "O tamanho mínimo do nome são de 5 letras.")] /*...MinLength – informa qual é o tamanho mínimo do respectivo campo. Caso a regra 
											 seja violada, será exibida a mensagem no ErrorMessage. */


	[MaxLength(10, ErrorMessage = "O tamanho máximo do nome são de 10 letras.")] /*...MaxLength – informa qual é o tamanho máximo do respectivo campo. Caso a 
											  regra seja violada, será exibida a mensagem no ErrorMessage. */

        [StringLength(100, MinimumLength = 1,] /*.......................StringLength – 100 antes da vírgula define o tamanho máximo do campo, MinimumLength = 1 indica
									o tamanho mínimo. No banco de dados os números atribuídos serão de MaxLength e MinLength. */


	[Display(Name = "Nome do Produto")] /*..........................Display (Name="")– é o nome a ser mostrado em todas as interfaces de usuário. Nem sempre o nome 
									da propriedade é o melhor texto a ser mostrado na UI, portanto, você pode alterar. */

        [DisplayFormat(DataFormatString = "{0:n2}", ApplyFormatInEditMode = true, NullDisplayText = "Vazio")] /*...DisplayFormat – é o formato a ser exibido na UI. 
														   O ApplyFormatInEditMode indica se o formato deverá 
														   ser usado quando entrar no modo de edição. O 
														   NullDisplayText indica qual é o texto a ser mostrado 
														   quando o campo for nulo.  */

        [DisplayFormat(DataFormatString = "{0:dd/mm/yyyy}", NullDisplayText = "00/00/0000")] /*....................Outro Exemplo do DisplayFormat para Datas */

        [Range(1, 100, ErrorMessage = "Quantidade mínima de 1 unidade")] /*...Range – define a faixa de dados aceita pela propriedade. Caso esteja fora da faixa é 
									      mostrado o ErrorMessage.

	[EmailAddress(ErrorMessage = "Defina um e-mail válido")] /*....EmailAddress - Verifica se o formato do endereço que o usuário 
							       		digitou é um endereço de e-mail válido */

	[Phone(ErrorMessage = "Defina um número de telefone válido")] /*....Phone - Verifica se o formato do número para contato que o 
								    		usuário digitou é um número válido */


<<<--------------------------------------------------------------------

DATA ANNOTATION para Back End: (Utilizados para definir a modelagem dos dados para o banco de dados)
 

 	[Table("Alunos")] /*............................................Table – utilizado para especificar o nome da tabela que será adicionada ao banco de dados */

 	[NotMapped] /*..................................................NotMapped - pode ser aplicado a propriedades de uma classe de entidade para a qual não 
									desejamos criar colunas correspondentes no banco de dados. Ela exclui a propriedade do
									mapeamento*/

        [Key] //........................................................Key – define que tal propriedade é a chave primária;

        [Column(Order = 0)] /*..........................................Column Order – é o número da ordem da coluna em que a propriedade será criada fisicamente no  
								        banco de dados. */ 

	[Column(TypeName = "decimal(6,2)")] /*..........................Column TypeName – Define o tipo de dados de uma coluna. Neste exemplo, o tipo de dado foi
								        alocado como decimal e a quantidade de caracteres máxima será de 6 sendo que 2 ficará destinada para
									as casas após a vírgula. OBS: o número máximo de caracteres permitido é de até 38 */



<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

								EXEMPLOS PRATÍCOS DOS CÓDIGOS DATA ANNOTATION NAS MODELS
Exemplo Model Aluno:

    [Table("Alunos")]
    public class Aluno
    {
        #region PROPRIEDADES

        //Id Aluno
        [Key]
        [Column(Order = 0)]
        public int IdAluno { get; set; }

        //Nome
        [Column(Order = 1)]
        [Display(Name = "Nome do Aluno")]
        [Required(ErrorMessage = "Defina o nome do Aluno")]
        [StringLength(100, MinimumLength = 4, ErrorMessage = "O nome deve conter no mínimo quatro letras")]
        public string NomeAluno { get; set; }

        //Data de Nascimento
        [Column(Order = 2)]
        [Display(Name = "Data de Nascimento")]
        [Required(ErrorMessage = "Defina a data de nascimento do Aluno")]
        [DisplayFormat(DataFormatString = "{0:dd/mm/yyyy}", NullDisplayText = "00/00/0000")]
        public DateTime NascAluno { get; set; }

        //NTelefone
        [Column(Order = 3)]
        [Display(Name = "Telefone de Contato")]
	[Phone(ErrorMessage = "Defina um número de telefone válido")]
        [Required(ErrorMessage = "É necessário ao menos um número de contato para o Aluno")]
        public string TelAluno { get; set; }

        //e-mail
        [Column(Order = 4)]
        [Display(Name = "e-mail")]
	[EmailAddress(ErrorMessage = "Defina um e-mail válido")]
        [Required(ErrorMessage = "É necessário ao menos um e-mail de contato para o Aluno")]
        public string EmailAluno { get; set; }

        #endregion
    }


	<<<------------------------------------------------------------------------------------------------------------------------------------------>>>


Exemplo Model Produtos:

    [Table("Produtos")] //table é colocado fora da classe
    public class ProdutoModel
    {
        #region PROPRIEDADES

        //Id do Produto
        [Key]
        [Column(Order = 0)]
        public int IdProduto { get; set; }

        //Nome
        [Column(Order = 1)]
        [Display(Name = "Nome do Produto")]
        [Required(ErrorMessage = "Defina o nome do produto")]
        [StringLength(100, MinimumLength = 1, ErrorMessage = "O nome deve conter no mínimo uma letra")]
        public string NomeProduto { get; set; }

        //Quantidade
        [Column(Order = 2)]
        [Display(Name = "Quantidade de Produtos")]
        [Range(1, 100, ErrorMessage = "Quantidade mínima de 1 unidade")]
        [Required(ErrorMessage = "Defina a quantidade de produtos")]
        [DisplayFormat(DataFormatString = "{0:n2}", ApplyFormatInEditMode = true, NullDisplayText = "Vazio")]
        public int QtdeProduto { get; set; }


        //Preço
        [Column(Order = 3, TypeName = "decimal(6,2)")]
        [Display(Name = "Preço por unidade")]
        [Range(0.1, 9999.99, ErrorMessage = "Preço mínimo de R$0,10 e máximo de R$9.999,99")]
        [DisplayFormat(DataFormatString = "{0:n2}", ApplyFormatInEditMode = true, NullDisplayText = "R$0,00")]
        public decimal PrecoProduto { get; set; }
        

        //Vencimento
        [Column(Order = 4)]
        [Display(Name = "Vencimento")]
        [DisplayFormat(DataFormatString = "{0:dd/mm/yyyy}", NullDisplayText = "00/00/0000")]
        public DateTime VenctProduto { get; set; }

        #endregion
    {

		