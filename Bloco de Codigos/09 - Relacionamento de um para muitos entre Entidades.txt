							CONFIGURAÇÃO DO RELACIONAMENTO DE UM PARA MUITOS ENTRE ENTIDADES	

<<<----------------------------------------------------------------------------------------------->>>

Nas Models:

Implementando um relacionamento de Um para Muitos entre as entidades Classe e Aluno:

    public class Classe
    {
	PROPRIEDADES

        #region definição da relação de uma classe para muitos Alunos
        public List<Aluno> Alunos { get; set; }
        #endregion
    }


    public class Aluno
    {
        PROPRIEDADES

        #region definição da relação de muitos Alunos para uma classe
        public int IdClasse { get; set; }
        public virtual Classe Classe { get; set; }

        #endregion
    }
}

<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Na Repository da Classe:

    public interface IClasseRepository
    {
        IEnumerable<Classe> Classes { get; } //IEnumerable retorna a lista das classes para serem utilizadas nos foreach das views
        Classe GetClasseById(int id);        //Listar classe no banco por Id para retornar seus dados às layouts de atualização e exclusão
        Classe Adicionar(Classe classe);     //Adicionar nova classe no banco de dados
        Classe Atualizar(Classe classe);     //Atualizar nova classe no banco de dados
        bool Excluir(int id);                //Excluir classe do banco de dados
    }


    public class ClasseRepository : IClasseRepository
    {
        #region Instância AppDbContext
        private readonly AppDbContext _appContext;  /* injetar um objeto ("readonly" somente leitura) fora do construtor para 
                                                       receber o objeto interno do construtor e liberar seu acesso fora do mesmo */

        public ClasseRepository(AppDbContext Context) //construtor
        {
            _appContext = Context;
        }
        #endregion

        #region CRUD

        #region LISTAR TODAS AS CLASSES
        public IEnumerable<Classe> Classes => _appContext.Classes; //Retorna a lista das classes para serem utilizadas nos foreach das views
        #endregion 

        #region LISTAR CLASSE POR ID
        public Classe GetClasseById(int id)
        {
            return _appContext.Classes.FirstOrDefault(c => c.IdClasse == id); /* buscar o primeiro ou o único registro da tabela Classes 
                                                                               * buscar registro onde c.IdClasse seja igual ao id passado por parâmetro)*/
        }
        #endregion

        #region ADICIONAR NOVA CLASSE
        public Classe Adicionar(Classe classe)
        {
            _appContext.Classes.Add(classe); // Acessando a tabela "Classes" criada na classe AppDbContext para adicionar classe no banco de dados

            _appContext.SaveChanges();       // Código necessário para confirmar para o banco a ação de adicionar

            return classe;
        }
        #endregion

        #region ATUALIZAR NOVA CLASSE
        public Classe Atualizar(Classe classe)
        {
            Classe classeDB = GetClasseById(classe.IdClasse); // classeDB recebe por Id os dados da classe passados por parâmetro pelo layout "Adicionar"

            if (classeDB == null) throw new System.Exception("Classe não cadastrada no sistema"); /* condição verifica se classeDB está cadastrada no banco de dados,
                                                                                                       se o resultado da verificação for nula, isto indica que não 
                                                                                                       existe nenhuma classe cadastrada com este id */

            /*se o resultado da verificação retornar um valor existente, 
              a "classeDB" cadastrada no banco de dados receberá os dados 
              novos passados pelo usuário */
            classeDB.NomeClasse = classe.NomeClasse;

            _appContext.Classes.Update(classeDB); /* Acessando a tabela "Classes" criada na classe AppDbContext 
                                                     para editar classe já existente no banco de dado       */

            _appContext.SaveChanges();      // Código necessário para confirmar para o banco a ação de atualizar

            return classe;

        }
        #endregion

        #region EXCLUIR CLASSE
        public bool Excluir(int id)
        {
            Classe classeDB = GetClasseById(id); // classeDB recebe por Id os dados da classe passadas por parâmetro pelo layout "Adicionar"

            if (classeDB == null) throw new System.Exception("Classe não cadastrada no sistema"); /* condição verifica se classeDB está cadastrada no banco de dados,
                                                                                                   se o resultado da verificação for nula, isto indica que não 
                                                                                                   existe nenhuma classe cadastrada com este id */


            _appContext.Classes.Remove(classeDB);  /* Acessando a tabela "Classes" criada na classe AppDbContext 
                                                      para excluir classe já existente no banco de dado       */

            _appContext.SaveChanges();          // Código necessário para confirmar para o banco a ação de excluir

            return true;
        }
        #endregion

        #endregion
    }
}


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Na Repository do Aluno:

    public interface IAlunoRepository
    {
        IEnumerable<Aluno> Alunos { get; } //IEnumerable retorna a lista dos Alunos para serem utilizados nos foreach das views
        Aluno GetAlunoById(int id);        //Listar aluno Id e sua respectiva classe para retornar seus dados às views de atualização e exclusão
        Aluno Adicionar(Aluno aluno);      //Adicionar novo aluno no banco de dados
        Aluno Atualizar(Aluno aluno);      //Atualizar novo aluno no banco de dados
        bool Excluir(int id);              //Excluir aluno do banco de dados
    }


    public class AlunoRepository : IAlunoRepository
    {
        #region Instância de AppDbContext
        private readonly AppDbContext _appContext;  /* injetar uma instância ("readonly" somente leitura) fora do construtor para 
                                                       receber a instância interna do construtor e liberar seu acesso fora do mesmo */

        public AlunoRepository(AppDbContext Context) //construtor
        {
            _appContext = Context;
        }
        #endregion

        #region CRUD

        #region LISTAR TODOS OS ALUNOS E SUAS RESPECTIVAS CLASSES
        public IEnumerable<Aluno> Alunos => _appContext.Alunos.Include(c => c.Classe); /*IEnumerable - retorna a lista dos alunos para serem utilizadas nos foreach das views
                                                                                         .Include(c => c.Classe) inclui o retorno da lista das classes dos alunos */
        #endregion

        #region LISTAR ALUNO POR ID E SUA RESPECTIVA CLASSE
        public Aluno GetAlunoById(int id)
        {
            return _appContext.Alunos.Include(c => c.Classe).FirstOrDefault(aluno => aluno.IdAluno == id); // buscar o primeiro ou o único registro da tabela Alunos 
                                                                                                           //.Include(c => c.Classe) inclui o retorno da classe do aluno específico
                                                                                                           //buscar registro onde aluno.IdAluno seja igual ao id passado por parâmetro
        }
        #endregion

        #region ADICIONAR NOVO ALUNO
        public Aluno Adicionar(Aluno aluno)
        {
            _appContext.Alunos.Add(aluno); /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                     para adicionar aluno no banco de dados       */

            _appContext.SaveChanges();     // Código necessário para confirmar para o banco a ação de adicionar

            return aluno;
        }
        #endregion

        #region ATUALIZAR NOVO ALUNO
        public Aluno Atualizar(Aluno aluno)
        {
                Aluno alunoDB = GetAlunoById(aluno.IdAluno); // alunoDB recebe por Id os dados do aluno passados por parâmetro pelo layout "Adicionar"

                if (alunoDB == null) throw new System.Exception("Aluno não cadastrado no sistema"); /* condição verifica se alunoDB está cadastrado no banco de dados,
                                                                                                       se o resultado da verificação for nula, isto indica que não 
                                                                                                       existe nenhum aluno cadastrado com este id */

            /*se o resultado da verificação retornar um valor existente, 
              o "alunoDB" cadastrado no banco de dados receberá os dados 
              novos passados pelo usuário */
            alunoDB.NomeAluno  = aluno.NomeAluno;
            alunoDB.NascAluno  = aluno.NascAluno;
            alunoDB.TelAluno   = aluno.TelAluno;
            alunoDB.EmailAluno = aluno.EmailAluno;

            _appContext.Alunos.Update(alunoDB); /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                para editar aluno já existente no banco de dado       */

            _appContext.SaveChanges();      // Código necessário para confirmar para o banco a ação de atualizar

            return aluno;

        }
        #endregion

        #region EXCLUIR ALUNO
        public bool Excluir(int id)
        {
            Aluno alunoDB = GetAlunoById(id); // alunoDB recebe por Id os dados do aluno passados por parâmetro pelo layout "Adicionar"

            if (alunoDB == null) throw new System.Exception("Aluno não cadastrado no sistema"); /* condição verifica se alunoDB está cadastrado no banco de dados,
                                                                                                   se o resultado da verificação for nula, isto indica que não 
                                                                                                   existe nenhum aluno cadastrado com este id */


            _appContext.Alunos.Remove(alunoDB);  /* Acessando a tabela "Alunos" criada na classe AppDbContext 
                                                    para excluir aluno já existente no banco de dado       */

            _appContext.SaveChanges();          // Código necessário para confirmar para o banco a ação de excluir

            return true;
        }
        #endregion

        #endregion
    }
}


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Na Controller de Aluno:

        #region MÉTODOS GET
        public IActionResult Index()
        {
            //Instância da ViewModel AlunoListViewModel
            var alunoClasseViewModel = new AlunoClasseViewModel  
            {
                Alunos = _alunoRepository.Alunos, //Lista todos os alunos cadastrados
                ClasseAtual = "Classe Atual"      //Lista a classe atual dos alunos cadastrados
            };  

            return View(alunoClasseViewModel);
        }

        public IActionResult Atualizar(int id)
        {
            Aluno aluno = _alunoRepository.GetAlunoById(id); //buscando por id o Aluno já cadastrado para retornar seus dados na view de Atualização
            return View(aluno);
        }

        public IActionResult ConfirmarExcluir(int id)       //este método servirá para confirmar se o usuário realmente quer excluir um aluno antes que o faça
        {
            Aluno aluno = _alunoRepository.GetAlunoById(id); //buscando por id o Aluno já cadastrado para retornar seus dados na view de Exclusão
            return View(aluno);
        }
	
	#region

<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Na Controller da Classe:

        #region MÉTODOS GET
        public IActionResult Index()
        {
            IEnumerable<Classe> classe = _classeRepository.Classes; //Lista todas as classes cadastradas no banco de dados
            return View(classe);
        }

        public IActionResult Atualizar(int id)
        {
            Classe classe = _classeRepository.GetClasseById(id); //buscando por id a classe já cadastrada para retornar seus dados na view de Atualização
            return View(classe);
        }

        public IActionResult ConfirmarExcluir(int id)       //este método servirá para confirmar se o usuário realmente quer excluir uma classe antes que o faça
        {
            Classe classe = _classeRepository.GetClasseById(id); //buscando por id a classe já cadastrada para retornar seus dados na view de Exclusão
            return View(classe);
        }
	
	#region


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Nas Views de Aluno:

View Index:
@model AlunoClasseViewModel

    <tbody>
        <!--linhas-->
        @if (Model != null && Model.Alunos.Any()) //se a ViewModel com a lista de alunos for diferente de nulo e se a ViewModel contém algum dado
        {
            foreach (Aluno alunos in Model.Alunos) //listar todos os alunos
            {
                <tr>
                    <th scope="row">@alunos.IdAluno</th>
                    <td>@Model.ClasseAtual</td> <!--busca a propriedade "ClasseAtual" da ViewModel que lista a classe atual dos alunos cadastrados-->
                    <td>@alunos.NomeAluno</td>
                    <td>@alunos.NascAluno.ToString("dd/MM/yyyy")</td>
                    <td>@alunos.TelAluno</td>
                    <td>@alunos.EmailAluno</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                            <a role="button" class="btn btn-danger" asp-route-id="@alunos.IdAluno" asp-controller="Aluno" asp-action="ConfirmarExcluir">excluir</a>
                            <!--asp-route-id="alunos.IdAluno" mapeia o Id cadastrado para realizar a ação passada para a tabela-->

                            <a role="button" class="btn btn-warning" asp-route-id="@alunos.IdAluno" asp-controller="Aluno" asp-action="Atualizar">Atualizar</a>
                        </div>
                    </td>
                </tr>
            }
        }
        <!--linhas-->
    </tbody>


<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------->>>

Nas Views da Classe:

View Index:
@model IEnumerable<Classe>

        <!--linhas-->
        @if (Model != null && Model.Any()) //se a model com a lista de classes for diferente de nulo e se a model contém algum dado)
        {
            foreach (Classe classes in Model) //Laço de repetição para listar todas as classes
            {
                <tr>
                    <th scope="row">@classes.IdClasse</th> <!--classes.Propriedade busca a propriedade da model para aparecer na tela para o usuário-->
                    <td>@classes.NomeClasse</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Basic mixed styles example">
                            <a role="button" class="btn btn-danger" asp-route-id="@classes.IdClasse" asp-controller="Classe" asp-action="ConfirmarExcluir">excluir</a>
                            <!--asp-route-id="classes.IdClasse" mapeia o Id cadastrado para realizar a ação passada para a tabela-->

                            <a role="button" class="btn btn-warning" asp-route-id="@classes.IdClasse" asp-controller="Classe" asp-action="Atualizar">Atualizar</a>
                        </div>
                    </td>
                </tr>
            }
        }
        <!--linhas-->





<<<--------------------------------------------------------------




@model Aluno
@{
    ViewData["Title"] = "Atualizar";
}

<!--cabeçalho-->
<div class="text-center">
    <h4 class="display-4">Atualizar cadastro do Aluno (@Model.NomeAluno)</h4>
</div>
<!--cabeçalho-->

<!--formulário de Edição-->
<form asp-controller="Aluno" asp-action="Atualizar" method="post">

    <!--Id-->
    <input type="hidden" asp-for="IdAluno">
    <!--Id-->

    <!--DropDown List de seleção de Classe-->
    <!--Função JQuery necessário para que a DropDwon cite a classe atual do aluno-->
    <div class="form-group">

        <select name="IdClasse" id="IdClasse" class="form-control">

            <!--Converte a ViewBag.Classes em uma lista para apresentar todas as classes existentes-->
            @{foreach (var classe in (List<TesteCRUD.Models.Classe>)ViewBag.Classes)
                {
                    <option value="@classe.IdClasse">@classe.NomeClasse</option>
                }
            }
        </select>

        <!--atributo para mostrar as menssagens de erro de validação para o usuário-->
        <div style="color: #ff0000">
            @Html.ValidationMessageFor(a => a.NomeAluno)
        </div>
    </div>
    <!--DropDown List de seleção de Classe-->

    <!--Nome-->
    @Html.DisplayNameFor(x => x.NomeAluno)
    <div class="form-group">
        <input class="form-control" type="text" asp-for="NomeAluno" name="NomeAluno">
        <!--asp-for="NomeAluno" mapeia a imput com a propriedade NomeAluno da model Aluno -->
    </div>
    <!--Nome-->

    <!--Data de Nascimento-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.NascAluno)
        <input class="form-control" type="text" asp-for="NascAluno" name="NascAluno">
    </div>
    <!--Data de Nascimento-->

    <!--Contato-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.TelAluno)
        <input class="form-control" type="text" asp-for="TelAluno" name="TelAluno">
    </div>
    <!--Contato-->

    <!--E-mail-->
    <div class="form-group">
        @Html.DisplayNameFor(x => x.EmailAluno)
        <input class="form-control" type="text" asp-for="EmailAluno" name="EmailAluno">
    </div>
    <!--E-mail-->

    <br />

    <!--botão Editar-->
    <button type="submit" class="btn btn-warning align-self-end btn-block">Atualizar</button>
    <!--botão Editar-->

    <br />

    <!--botão Voltar-->
    <a class="btn btn-secondary align-self-start btn-block" asp-controller="Aluno" asp-action="Index" role="button">Cancelar</a>
    <!--botão Voltar-->

</form>
<!--formulário de Edição-->
